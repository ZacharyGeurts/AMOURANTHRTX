#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable

layout(set = 0, binding = 0) uniform accelerationStructureEXT TopLevelAS;

struct CameraUBO {
    mat4 view;
    mat4 proj;
    vec3 origin;
    float padding;
};

layout(set = 0, binding = 2, std430) readonly buffer CameraData {
    CameraUBO camera;
};

layout(set = 0, binding = 1, rgba8) writeonly uniform image2D storageImage;

layout(set = 0, binding = 8, r32f) uniform image2D gDepth;
layout(set = 0, binding = 9, rgb10_a2) uniform image2D gNormal;

layout(push_constant) uniform PushConstants {
    vec2 resolution;
} pc;

struct RayPayload {
    vec4 color;
};

layout(location = 0) rayPayloadEXT RayPayload payload;

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / pc.resolution;
    const vec2 d = (inUV - 0.5) * vec2(pc.resolution.x / pc.resolution.y, 1.0);

    const vec4 origin = vec4(camera.origin, 1.0);
    const vec4 target = inverse(camera.proj * camera.view) * vec4(d, 0.0, 1.0);
    const vec3 rayDir = normalize((target - origin).xyz);

    payload.color = vec4(0.0);
    traceRayEXT(TopLevelAS, gl_RayFlagsNoneEXT, 0xFF, 0, 0, 0, origin.xyz, 0.001, rayDir, 1e30, 0);

    imageStore(storageImage, ivec2(gl_LaunchIDEXT.xy), payload.color);
}